import java.util.*;
import java.util.stream.Collectors;

public class GroupAnames {
    public static void main(String[] args) {
        Map<String, Map<String, List<String>>> originalMap = new HashMap<>();

        // Example data
        originalMap.put("A1", Map.of("B1", Arrays.asList("C1", "C2"), "B2", Arrays.asList("C3")));
        originalMap.put("A2", Map.of("B2", Arrays.asList("C3"), "B1", Arrays.asList("C2", "C1"))); // same as A1
        originalMap.put("A3", Map.of("B1", Arrays.asList("C1")));

        // Grouping result
        Map<String, List<String>> grouped = new HashMap<>();

        for (Map.Entry<String, Map<String, List<String>>> entry : originalMap.entrySet()) {
            String aName = entry.getKey();
            Map<String, List<String>> bMap = entry.getValue();

            // Normalize: sort keys and sort cNames inside each list
            String normalizedKey = normalizeMap(bMap);

            grouped.computeIfAbsent(normalizedKey, k -> new ArrayList<>()).add(aName);
        }

        // Print the grouping
        for (Map.Entry<String, List<String>> group : grouped.entrySet()) {
            System.out.println("Group: " + group.getValue());
        }
    }

    // Normalizes the Map<bname, List<cname>> to a sorted String
    private static String normalizeMap(Map<String, List<String>> map) {
        return map.entrySet().stream()
            .sorted(Map.Entry.comparingByKey())
            .map(e -> e.getKey() + ":" + 
                e.getValue().stream().sorted().collect(Collectors.joining(",")))
            .collect(Collectors.joining("|"));
    }
}





CREATE PROCEDURE usp_GetDiverseRandomRows
AS
BEGIN
    SET NOCOUNT ON;

    -- Track final results
    CREATE TABLE #Result (
        colA INT,
        colB VARCHAR(100),
        colC VARCHAR(100),
        colD VARCHAR(100)
    );

    -- Track used colB/colC values
    CREATE TABLE #Used (
        colB VARCHAR(100),
        colC VARCHAR(100)
    );

    -- Cursor over distinct colA values
    DECLARE colA_cursor CURSOR FOR
        SELECT DISTINCT colA FROM TableName;

    DECLARE @colA INT;

    OPEN colA_cursor;
    FETCH NEXT FROM colA_cursor INTO @colA;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Try to find a row with new colB/colC
        ;WITH Candidates AS (
            SELECT *
            FROM TableName
            WHERE colA = @colA
        ),
        NotUsed AS (
            SELECT TOP 1 *
            FROM Candidates c
            WHERE NOT EXISTS (
                SELECT 1
                FROM #Used u
                WHERE u.colB = c.colB OR u.colC = c.colC
            )
            ORDER BY NEWID()
        )
        -- Try to use NotUsed row first, fallback otherwise
        INSERT INTO #Result (colA, colB, colC, colD)
        SELECT TOP 1 colA, colB, colC, colD
        FROM NotUsed

        -- Fallback if no NotUsed row found
        IF @@ROWCOUNT = 0
        BEGIN
            INSERT INTO #Result (colA, colB, colC, colD)
            SELECT TOP 1 colA, colB, colC, colD
            FROM TableName
            WHERE colA = @colA
            ORDER BY NEWID();
        END

        -- Insert picked values into #Used
        INSERT INTO #Used (colB, colC)
        SELECT r.colB, r.colC
        FROM #Result r
        WHERE r.colA = @colA;

        FETCH NEXT FROM colA_cursor INTO @colA;
    END

    CLOSE colA_cursor;
    DEALLOCATE colA_cursor;

    -- Return final results
    SELECT * FROM #Result;

    DROP TABLE #Result;
    DROP TABLE #Used;
END;





WITH Ranked AS (
    SELECT *,
           ROW_NUMBER() OVER (
               PARTITION BY colA, colB, colC
               ORDER BY NEWID()
           ) AS rn
    FROM TableName
),
Deduped AS (
    SELECT colA, colB, colC, colD
    FROM Ranked
    WHERE rn = 1
),
PickOnePerColA AS (
    SELECT a.*
    FROM Deduped a
    OUTER APPLY (
        SELECT TOP 1 b.*
        FROM Deduped b
        WHERE b.colA = a.colA
          AND NOT EXISTS (
              SELECT 1 FROM Deduped c
              WHERE c.colA <> b.colA AND (c.colB = b.colB OR c.colC = b.colC)
          )
        ORDER BY NEWID()
    ) AS match
)
SELECT DISTINCT colA, colB, colC, colD
FROM PickOnePerColA;




SELECT *
FROM (
  SELECT *, ROW_NUMBER() OVER (PARTITION BY colA ORDER BY NEWID()) AS rn
  FROM your_table
) t
WHERE rn = 1;


<div th:if="${#lists.isNotEmpty(labelToValues)}">
    <select name="items" id="items">
        <!-- Default "All" option -->
        <option value="ALL">All</option>

        <!-- Other options from the map -->
        <option th:each="entry : ${labelToValues}"
                th:value="${#strings.arrayJoin(entry.value.toArray(), ',')}"
                th:text="${entry.key}">
        </option>
    </select>
</div>


<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>5.2.2</version>
		</dependency>

		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>5.2.2</version>
		</dependency>




XSSFWorkbook workbook = new XSSFWorkbook(fis);
		Workbook book = new Workbook();
		book.setData(new LinkedHashMap<String, List<LinkedHashMap<String, Object>>>());
		int sheetCount = workbook.getNumberOfSheets();
		while (sheetCount > 0) {
			sheetCount--;
			XSSFSheet sheet = workbook.getSheetAt(sheetCount);
			book.getData().put(sheet.getSheetName(), new LinkedList<LinkedHashMap<String, Object>>());
			Iterator<Row> rowIterator = sheet.iterator();
			List<String> header = rowIterator.hasNext() ? readHeader(rowIterator.next()) : Collections.EMPTY_LIST;
			while (rowIterator.hasNext()) {
				Row row = rowIterator.next();
				LinkedHashMap<String, Object> cells = new LinkedHashMap<>();
				// For each row, iterate through all the columns
				Iterator<Cell> cellIterator = row.cellIterator();
				while (cellIterator.hasNext()) {
					Cell cell = cellIterator.next();
					// Check the cell type and format accordingly
					if (CellType.BOOLEAN.equals(cell.getCellType())) {
						cells.put(header.get(cell.getColumnIndex()), cell.getBooleanCellValue());
					} 
					else if (CellType.NUMERIC.equals(cell.getCellType())) {
						cells.put(header.get(cell.getColumnIndex()), cell.getNumericCellValue());
					} 
					else if (CellType.BLANK.equals(cell.getCellType())) {
						continue;
					} else {
						cells.put(header.get(cell.getColumnIndex()), cell.getStringCellValue());
					}

				}
				// add only if there are non empty cells.
				if (!cells.isEmpty()) {
					book.getData().get(sheet.getSheetName()).add(cells);
				}
			}
		}
		workbook.close();
		return book;



@PostMapping("/readExcel/{dataCenterId}")
public ResponseEntity<DataCenterDto> userInfraDetails(@RequestBody Map<String, String> input, @PathVariable BigInteger dataCenterId) throws Exception {
            DataCenter dataCenter = null;
            if(StringUtils.hasLength(input.get("filePath"))) {
                        dataCenter = excelUploadService.processExcelFile(input.get("filePath"), dataCenterId);
            } else if(StringUtils.hasLength(input.get("file"))) {
                        dataCenter = excelUploadService.processExcelContent(input.get("file"), dataCenterId);
            } else {
                        throw new Exception("Neither Excel file path nor file content has been provided");
            }
            
            assessmentClient.evaluateDataCenterDiscovery(dataCenterId);
            return new ResponseEntity<DataCenterDto>(dataCenter.toDto(), HttpStatus.OK);
}





	public DataCenter processExcelContent(String fileContent, BigInteger dcId) throws Exception {
		Workbook workbook = ExcelUtil.readFileContent(fileContent);
		DataCenter dc = parseExcelContent(workbook, dcId);
		return dc;
	}





	private List<Host> parseHost(List<LinkedHashMap<String, Object>> hostSheet, DataCenter dataCenter){
		List<Host> hosts = new ArrayList<Host>();
		if (CollectionUtils.isNotEmpty(hostSheet)) {
			hostSheet.stream().forEach(map -> {
				String name = (String) map.get(mapper.getHostNameColumn());
				String ipAddress = (String) map.get(mapper.getIPAddressColumn());
				String details = JsonUtil.toJson(map);

				Host existingHost = dataCenter.getHosts().stream()
						.filter(h -> isEqual(h.getName(), name) && isEqual(h.getIpAddress(), ipAddress)).findFirst()
						.orElse(null);
				if (existingHost != null) {
					existingHost.setDetailsInJson(details);
					hosts.add(existingHost);
				} else {
					Host host = Host.builder().name(name).ipAddress(ipAddress).dataCenter(dataCenter)
							.detailsInJson(details).build();
					hosts.add(host);
				}
			});
			
			dataCenter.getHosts().clear();
			dataCenter.getHosts().addAll(hosts);
		}
		return hosts;
	}





	private DataCenter parseExcelContent(Workbook workbook, BigInteger dcId) throws Exception {
		Optional<DataCenter> dataCenterOpt = service.findById(dcId);
		if(!dataCenterOpt.isPresent()) {
			throw new Exception("DataCenter for which template is being uploaded is not present in the system.");
		}
		DataCenter dataCenter =  dataCenterOpt.get();
		//parse hosts
		List<LinkedHashMap<String, Object>> hostSheet = workbook.getData().get(mapper.getHostSheet());
		parseHost(hostSheet, dataCenter);
		if(CollectionUtils.isNotEmpty(hostSheet)) {
			dataCenter.setPhase(Phase.ASSESSMENT);			
		}
		//parse processes
		List<LinkedHashMap<String, Object>> processSheet = workbook.getData().get(mapper.getProcessSheet());
		parseProcess(processSheet, dataCenter.getHosts());
		dataCenter = service.save(dataCenter);
	
	//=====================================================================================================================//	
		//parse applications
		List<LinkedHashMap<String, Object>> applicationSheet = workbook.getData().get(mapper.getApplicationSheet());
		List<Application> oldApps = appRepository.findByDataCenter(dataCenter);
		List<Application> newApps = parseApplication(applicationSheet, dataCenter.getHosts(), oldApps, dataCenter);
		oldApps.removeAll(newApps);
		List<Application> apps = appRepository.saveAllAndFlush(newApps);
		if(CollectionUtils.isNotEmpty(apps)) {
			client.createApplicationSurveyor(apps.stream().map(a -> a.toCommonApp()).toList());
		}
		if(CollectionUtils.isNotEmpty(oldApps)) {
			appRepository.deleteAll(oldApps);
			client.deleteApplicationSurveyor(oldApps.stream().map(a -> a.toCommonApp()).toList());
		}
		
		//Save dc
//		dataCenter = service.save(dataCenter);
//
//		//Remove orphan applications
//		if(CollectionUtils.isNotEmpty(oldAppsSet)) {
//			for (Application app : oldAppsSet) {
//				app.getAppHosts().clear();
//			}
//		}
//		
//		appRepository.deleteAll(oldAppsSet);
		
		dataCenterOpt = service.findById(dcId);
		if(!dataCenterOpt.isPresent()) {
			throw new Exception("DataCenter for which template is being uploaded is not present in the system.");
		}
		dataCenter =  dataCenterOpt.get();
		
		return dataCenter;
	}

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.stereotype.Repository;
import javax.annotation.PostConstruct;
import java.util.*;
import java.sql.ResultSet;
import java.sql.SQLException;

@Repository
public class SPRepository {

    private final JdbcTemplate jdbcTemplate;

    private SimpleJdbcCall sp1Call;
    private SimpleJdbcCall sp2Call;
    private SimpleJdbcCall sp3Call;
    private SimpleJdbcCall sp4Call;

    public SPRepository(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @PostConstruct
    private void init() {
        sp1Call = new SimpleJdbcCall(jdbcTemplate)
                .withProcedureName("sp_one")
                .returningResultSet("result", spDtoMapper());

        sp2Call = new SimpleJdbcCall(jdbcTemplate)
                .withProcedureName("sp_two")
                .returningResultSet("result", spDtoMapper());

        sp3Call = new SimpleJdbcCall(jdbcTemplate)
                .withProcedureName("sp_three")
                .returningResultSet("result", spDtoMapper());

        sp4Call = new SimpleJdbcCall(jdbcTemplate)
                .withProcedureName("sp_four")
                .returningResultSet("result", spDtoMapper());
    }

    private RowMapper<SPDto> spDtoMapper() {
        return new RowMapper<SPDto>() {
            @Override
            public SPDto mapRow(ResultSet rs, int rowNum) throws SQLException {
                SPDto dto = new SPDto();
                dto.setName(rs.getString("name"));
                dto.setStatus(rs.getString("status"));
                dto.setValue(rs.getDouble("value"));
                // remarks and processedDate stay null
                return dto;
            }
        };
    }

    public List<SPDto> callAllProcedures() {
        List<SPDto> allResults = new ArrayList<>();

        allResults.addAll(callProcedure(sp1Call));
        allResults.addAll(callProcedure(sp2Call));
        allResults.addAll(callProcedure(sp3Call));
        allResults.addAll(callProcedure(sp4Call));

        return allResults;
    }

    private List<SPDto> callProcedure(SimpleJdbcCall call) {
        Map<String, Object> result = call.execute();
        return (List<SPDto>) result.get("result");
    }
}

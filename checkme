CREATE PROCEDURE ref.UpdateAndInsertB
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @currentDate DATETIME = GETDATE();

    BEGIN TRY
        BEGIN TRANSACTION;

        -- Step 0: Create a temp table to store CTE results
        CREATE TABLE #TempA (
            Id INT PRIMARY KEY,
            Value NVARCHAR(255) -- Adjust the datatype/size to match your real Value column
        );

        -- Step 1: Insert CTE result into #TempA
        INSERT INTO #TempA (Id, Value)
        -- your CTE and SELECT
        WITH CTE_A AS (
            SELECT 
                Id,
                Value
            FROM 
                ref.SomeOtherTable
            WHERE 
                SomeCondition = 1
        )
        SELECT 
            Id,
            Value
        FROM 
            CTE_A;

        -- Step 2: Update existing active records based on #TempA
        UPDATE B
        SET 
            B.EndDate = @currentDate,
            B.IsActive = 0
        FROM 
            ref.B AS B
        INNER JOIN 
            #TempA AS A ON A.Id = B.AID
        WHERE 
            B.IsActive = 1;

        -- Step 3: Insert new records into B
        INSERT INTO ref.B (AID, Value, StartDate, EndDate, IsActive)
        SELECT 
            A.Id,
            A.Value,
            @currentDate,
            NULL,
            1
        FROM 
            #TempA AS A;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;

        -- Optional: re-throw the error
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
        DECLARE @ErrorState INT = ERROR_STATE();

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END;

import java.lang.reflect.Method;
import java.util.List;

public class RowMapperUtil {

    public static <T> T mapArrayToBean(Object[] row, Class<T> clazz) {
        try {
            T instance = clazz.getDeclaredConstructor().newInstance();

            // Get all declared setters sorted by name (optional but ensures consistent order)
            List<Method> setters = List.of(clazz.getMethods()).stream()
                    .filter(m -> m.getName().startsWith("set") && m.getParameterCount() == 1)
                    .sorted((m1, m2) -> m1.getName().compareToIgnoreCase(m2.getName()))
                    .toList();

            for (int i = 0; i < row.length && i < setters.size(); i++) {
                Method setter = setters.get(i);
                Object value = row[i];

                // Convert value if primitive type mismatch occurs
                Class<?> paramType = setter.getParameterTypes()[0];
                if (value != null && !paramType.isAssignableFrom(value.getClass())) {
                    value = convertValue(value, paramType);
                }
                setter.invoke(instance, value);
            }
            return instance;
        } catch (Exception e) {
            throw new RuntimeException("Error mapping row to bean", e);
        }
    }

    private static Object convertValue(Object value, Class<?> targetType) {
        if (targetType.isAssignableFrom(value.getClass())) {
            return value;
        }
        if (targetType == String.class) {
            return String.valueOf(value);
        }
        if (targetType == Integer.class || targetType == int.class) {
            return ((Number) value).intValue();
        }
        if (targetType == Long.class || targetType == long.class) {
            return ((Number) value).longValue();
        }
        if (targetType == Double.class || targetType == double.class) {
            return ((Number) value).doubleValue();
        }
        if (targetType == Float.class || targetType == float.class) {
            return ((Number) value).floatValue();
        }
        if (targetType == Boolean.class || targetType == boolean.class) {
            return (value instanceof Boolean) ? value : Boolean.parseBoolean(value.toString());
        }
        return value; // fallback
    }
}
